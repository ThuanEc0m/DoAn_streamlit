import streamlit as st
import pandas as pd
import os
import altair as alt

def render_log_page():
    st.subheader("üìà Theo d√µi m√¥ h√¨nh")
    log_file = "prediction_log.csv"
    if not os.path.exists(log_file):
        st.info("‚õî Ch∆∞a c√≥ log n√†o ƒë∆∞·ª£c ghi.")
        return
    # --- Xo√° to√†n b·ªô log ---
    if os.path.exists(log_file):
        if st.button("üóëÔ∏è Xo√° to√†n b·ªô d·ªØ li·ªáu log"):
            os.remove(log_file)
            st.success("ƒê√£ xo√° log.")
            return

    # --- ƒê·ªçc log ---
    try:
        df_log = pd.read_csv(log_file, on_bad_lines='skip')
    except Exception as e:
        st.error(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c log: {e}")
        return

    if df_log.empty:
        st.info("‚õî Ch∆∞a c√≥ d·ªØ li·ªáu log.")
        return

    # --- Ch·ªçn ch·∫ø ƒë·ªô hi·ªÉn th·ªã ---
    use_all = st.checkbox("üìã D√πng to√†n b·ªô log", value=True)

    if use_all:
        df_view = df_log.copy()
    else:
        n_rows = st.slider("S·ªë d√≤ng log g·∫ßn nh·∫•t mu·ªën xem", min_value=10, max_value=min(2000, len(df_log)), value=50, step=10)
        df_view = df_log.tail(n_rows)

    # --- Hi·ªÉn th·ªã b·∫£ng ---
    st.markdown("### üìã D·ªØ li·ªáu log")
    st.dataframe(df_view)

    # --- Bi·ªÉu ƒë·ªì t·ªâ l·ªá ---
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìä T·ªâ l·ªá d·ª± ƒëo√°n m·ªü s·ªï")
        if "prediction" in df_view.columns:
            pred_ratio = df_view["prediction"].value_counts(normalize=True) * 100
            chart_data = pd.DataFrame({
                "Tr·∫°ng th√°i": ["Kh√¥ng m·ªü", "C√≥ m·ªü"],
                "T·ªâ l·ªá": [pred_ratio.get(0, 0), pred_ratio.get(1, 0)]
            })
            st.bar_chart(chart_data.set_index("Tr·∫°ng th√°i"))
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'prediction'.")

    with col2:
        st.markdown("### üìÜ T·ªâ l·ªá m·ªü s·ªï theo tu·∫ßn")
        if "timestamp" in df_view.columns:
            try:
                df_view['timestamp'] = pd.to_datetime(df_view['timestamp'], errors='coerce')
                df_view = df_view.dropna(subset=['timestamp'])

                weekly_acc = df_view.groupby(pd.Grouper(key='timestamp', freq='W'))['prediction'].mean().reset_index()
                weekly_acc['accuracy (%)'] = weekly_acc['prediction'] * 100

                chart = alt.Chart(weekly_acc).mark_line(point=True).encode(
                    x='timestamp:T',
                    y='accuracy (%):Q',
                    tooltip=['timestamp:T', 'accuracy (%):Q']
                ).properties(height=300)
                st.altair_chart(chart, use_container_width=True)
            except:
                st.warning("‚õî Kh√¥ng th·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì th·ªùi gian.")
