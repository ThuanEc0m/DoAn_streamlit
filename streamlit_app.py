import streamlit as st
from streamlit_echarts import st_echarts
import pandas as pd
import joblib

# 1. C·∫•u tr√∫c th∆∞ m·ª•c (n·∫øu kh√¥ng d√πng uploader)
#    .
#    ‚îú‚îÄ‚îÄ streamlit_app.py
#    ‚îú‚îÄ‚îÄ requirements.txt
#    ‚îú‚îÄ‚îÄ model.pkl

# 2. H√†m load d·ªØ li·ªáu linh ho·∫°t (CSV ho·∫∑c Excel)
@st.cache_data
def load_data(file) -> pd.DataFrame:
    if file.name.endswith('.csv'):
        return pd.read_csv(file)
    elif file.name.endswith(('.xls', '.xlsx')):
        return pd.read_excel(file)
    else:
        st.error('Ch·ªâ h·ªó tr·ª£ file .csv, .xls, .xlsx')
        return pd.DataFrame()

@st.cache_resource
def load_model(path: str):
    try:
        return joblib.load(path)
    except Exception as e:
        st.error(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c model: {e}")
        return None

# 3. V·∫Ω chart ECharts ƒë·ªông

def draw_chart(df: pd.DataFrame):
    st.subheader("Ch·ªçn ki·ªÉu chart")
    chart_type = st.selectbox('Lo·∫°i bi·ªÉu ƒë·ªì', ['Bar Chart (ƒê·∫øm)', 'Histogram'])
    if chart_type == 'Bar Chart (ƒê·∫øm)':
        col = st.selectbox('Ch·ªçn c·ªôt (categorical)', df.select_dtypes(include=['object', 'category']).columns.tolist())
        data = df[col].value_counts().reset_index()
        data.columns = [col, 'count']
        option = {
            'title': {'text': f'Bi·ªÉu ƒë·ªì ƒë·∫øm {col}'},
            'tooltip': {'trigger': 'axis'},
            'xAxis': {'type': 'category', 'data': data[col].tolist()},
            'yAxis': {'type': 'value'},
            'series': [{'type': 'bar', 'data': data['count'].tolist(), 'name': 'Count'}]
        }
    else:
        num_col = st.selectbox('Ch·ªçn c·ªôt (numeric)', df.select_dtypes(include=['int64', 'float64']).columns.tolist())
        bins = st.slider('S·ªë bins', 5, 50, 20)
        values = df[num_col].dropna().tolist()
        option = {
            'title': {'text': f'Histogram c·ªßa {num_col}'},
            'tooltip': {},
            'xAxis': {'type': 'value', 'splitNumber': bins},
            'yAxis': {'type': 'value'},
            'series': [{'type': 'histogram', 'data': values, 'name': num_col}]
        }
    st_echarts(options=option, height='450px')

# 4. Giao di·ªán ch√≠nh

def main():
    st.title('·ª®ng d·ª•ng Ph√¢n t√≠ch & D·ª± ƒëo√°n')

    # Upload file
    st.sidebar.header('1. Upload d·ªØ li·ªáu')
    data_file = st.sidebar.file_uploader('Ch·ªçn file CSV/Excel', type=['csv', 'xls', 'xlsx'])
    if data_file:
        df = load_data(data_file)
    else:
        st.info('Vui l√≤ng upload file d·ªØ li·ªáu ƒë·ªÉ ti·∫øp t·ª•c')
        return

    # Load model
    st.sidebar.header('2. T·∫£i m√¥ h√¨nh')
    model = load_model('model.pkl')

    # Ch·ªçn trang
    st.sidebar.header('3. Ch·ªçn ch·ª©c nƒÉng')
    page = st.sidebar.selectbox('Trang', ['B√°o c√°o', 'D·ª± ƒëo√°n'])

    if page == 'B√°o c√°o':
        st.header('üìä B√°o c√°o d·ªØ li·ªáu')
        st.write('K√≠ch th∆∞·ªõc:', df.shape)
        st.dataframe(df.head(10))
        draw_chart(df)

    else:
        st.header('ü§ñ D·ª± ƒëo√°n m·ªü term deposit')
        if model is None:
            st.warning('Ch∆∞a c√≥ m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra model.pkl')
            return
        # T·∫°o input t·ª± ƒë·ªông theo c·ªôt numeric
        inputs = {}
        st.subheader('Th√¥ng tin kh√°ch h√†ng')
        cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
        for c in cols:
            min_val, max_val = int(df[c].min()), int(df[c].max())
            default = int(df[c].median())
            inputs[c] = st.slider(c, min_val, max_val, default)

        # D·ª± ƒëo√°n
        if st.button('Predict'):
            X_pred = pd.DataFrame([inputs])
            try:
                y = model.predict(X_pred)
                st.success(f'K·∫øt qu·∫£ d·ª± ƒëo√°n: {y[0]}')
            except Exception as e:
                st.error(f'L·ªói khi d·ª± ƒëo√°n: {e}')

if __name__ == '__main__':
    main()